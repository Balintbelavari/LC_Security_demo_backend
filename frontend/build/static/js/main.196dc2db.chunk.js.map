{"version":3,"sources":["app.js","index.js","assets/lc_security_logo.png"],"names":["App","message","setMessage","useState","prediction","setPrediction","error","setError","loading","setLoading","useBert","setUseBert","handlePredict","async","text","inputMessage","trim","response","fetch","method","headers","body","JSON","stringify","use_bert","ok","errorData","json","Error","detail","statusText","data","err","React","createElement","className","src","logo","alt","value","onChange","e","target","placeholder","rows","style","height","minHeight","maxHeight","overflowY","onInput","scrollHeight","Math","min","onKeyDown","key","shiftKey","preventDefault","onClick","disabled","htmlFor","id","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.196dc2db.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./app.css\";\nimport logo from \"./assets/lc_security_logo.png\";\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [useBert, setUseBert] = useState(false); // State to track model selection\n\n  const handlePredict = async (inputMessage) => {\n    const text = inputMessage || message; // Use the provided example or typed input\n\n    if (!text.trim()) {\n      setError(\"Error: Message cannot be empty\");\n      return;\n    }\n\n    try {\n      setError(\"\");\n      setPrediction(\"\");\n      setLoading(true);\n      setMessage(text); // Set message state for example buttons\n\n      // Make the fetch request with both the message and use_bert\n      const response = await fetch(\n        \"https://lc-security-backend-d51e9de3f86b.herokuapp.com/predict\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            message: text,\n            use_bert: useBert, // Include use_bert in the request body\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          `Failed to fetch prediction: ${\n            errorData.detail || response.statusText\n          }`\n        );\n      }\n\n      const data = await response.json();\n      setPrediction(data.prediction);\n    } catch (err) {\n      setError(\"Error: \" + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <img src={logo} alt=\"LC Security Logo\" className=\"logo\" />\n        <span className=\"header-text\">LC Security</span>\n      </div>\n      <h1>\n        Is it a <span className=\"highlight\">scam</span>?\n      </h1>\n      <div className=\"input-container\">\n        <textarea\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Type something here...\"\n          rows=\"1\"\n          style={{\n            height: \"32px\",\n            minHeight: \"20px\",\n            maxHeight: \"160px\",\n            overflowY: \"auto\",\n          }}\n          onInput={(e) => {\n            e.target.style.height = \"20px\";\n            if (e.target.scrollHeight > 20) {\n              e.target.style.height =\n                Math.min(e.target.scrollHeight, 160) + \"px\";\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n              e.preventDefault();\n              handlePredict();\n            }\n          }}\n        />\n        <button onClick={() => handlePredict()} disabled={loading}>\n          Check\n        </button>\n      </div>\n\n      {/* Model Selection */}\n      <div className=\"model-selection\">\n        <label htmlFor=\"model-select\">Select Model:</label>\n        <select\n          id=\"model-select\"\n          value={useBert ? \"bert\" : \"traditional\"}\n          onChange={(e) => setUseBert(e.target.value === \"bert\")}\n        >\n          <option value=\"traditional\">Naive-Bayes Model</option>\n          <option value=\"bert\">BERT Model</option>\n        </select>\n      </div>\n\n      {loading && <p>Loading...</p>}\n      {prediction && (\n        <p className=\"prediction\">\n          Prediction: <strong>{prediction}</strong>\n        </p>\n      )}\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Example Messages Section */}\n      <div className=\"example-container\">\n        <p className=\"example-title\">Try these:</p>\n        <div className=\"example-buttons\">\n          <button\n            className=\"example-button\"\n            onClick={() =>\n              handlePredict(\n                \"Congratulations on Your Admission to the University of Debrecen!\"\n              )\n            }\n          >\n            Congratulations on Your Admission to the University of Debrecen!\n          </button>\n          <button\n            className=\"example-button\"\n            onClick={() =>\n              handlePredict(\n                \"NAV: A számlái zárolásra kerülnek. https://nav.gov.hu.id3ef4r.online\"\n              )\n            }\n          >\n            NAV: A számlái zárolásra kerülnek. https://nav.gov.hu.id3ef4r.online\n          </button>\n        </div>\n      </div>\n\n      {/* Version Section */}\n      <div className=\"version-container\">\n        <p className=\"version-label\">Newest Model Version: 0.2.2</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./app\"; // Import your app.js file\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","module.exports = __webpack_public_path__ + \"static/media/lc_security_logo.974cb370.png\";"],"sourceRoot":""}